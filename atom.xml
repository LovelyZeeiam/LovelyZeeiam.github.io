<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lovelyzeeiam.github.io</id>
    <title>Xueli的小博客</title>
    <updated>2020-09-02T12:51:07.791Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lovelyzeeiam.github.io"/>
    <link rel="self" href="https://lovelyzeeiam.github.io/atom.xml"/>
    <logo>https://lovelyzeeiam.github.io/images/avatar.png</logo>
    <icon>https://lovelyzeeiam.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Xueli的小博客</rights>
    <entry>
        <title type="html"><![CDATA[Minecraft基岩版存档架构简介（未完成）]]></title>
        <id>https://lovelyzeeiam.github.io/post/minecraft-ji-yan-ban-cun-dang-jia-gou-jian-jie/</id>
        <link href="https://lovelyzeeiam.github.io/post/minecraft-ji-yan-ban-cun-dang-jia-gou-jian-jie/">
        </link>
        <updated>2020-08-31T07:37:52.000Z</updated>
        <content type="html"><![CDATA[<p>花絮： 今天的bgm是什么呢？</p>
<p>啊 是sans.（</p>
<h1 id="写在前面">写在前面</h1>
<p>人在家中，刚下床，谢邀。本专栏由&quot;基本&quot;不会编程的up🐖书写，许多专业术语知识还欠缺，可能会有错误，还请大佬们见谅。</p>
<p>许多时候程序yuan并不会那么bt，许多在编程中用到数据的命名肯定都和英语有一部分关系，mc的level.dat就是一个例子。</p>
<figure data-type="image" tabindex="1"><img src="https://i0.hdslb.com/bfs/article/4adb9255ada5b97061e610b682b8636764fe50ed.png" alt="img" loading="lazy"></figure>
<h1 id="目录"><strong>目录</strong></h1>
<ol>
<li>存档全局信息 (level.dat)</li>
<li>存档资源包信息</li>
<li>NBT格式概述</li>
<li>存档其它信息</li>
<li>地形存储</li>
</ol>
<h1 id="存档全局信息"><strong>存档全局信息</strong></h1>
<p>网上关于修改level.dat的教程其实害挺多的，沃这里就一笔带过一下Awawawa~</p>
<p>level.dat是以<strong>未经压缩的NBT格式</strong>存储的（划重点，java版的level.dat是经过GZIP格式压缩的NBT格式）。NBT全名Named Binary  Tag，学过编程的小伙伴可以理解为一个Json数据的结构，没有学过的可以理解成一个数学中的函数——即给出一串文字，有且仅有唯一一个对象与之对应（之类的东西）。</p>
<p>但是捏  <sub>(￣▽￣)</sub>*，这个文件不是一开始就是nbt数据的开头。这个文件的一开始有留出四个字节。这四个字节会被游戏视为介个level.dat文件的版本号，后续如果要对这个文件的架构进行大的修改就可以通过版本号来判断这个文件是否该升级惹。接下来才是NBT的正文数据。</p>
<p>用NBT修改器打开这个文件，可以根据英文和游戏中敲命令的经历判断出每一个参数的名称对应的是游戏中的什么参数或功能（许多常用的修改都可以通过这个判断）。</p>
<p>存档里面的levelname.txt，这个应该是mojang为了玩家方便查找存档从而创建的一个记录存档名称的文件。但是如果只修改这个文件是达不到修改存档在游戏中显示的名称的。在游戏中修改存档的名称时，游戏会同时改变level.dat内的某个数据和levelname.txt文件；但是仅修改了levelname.txt文件，在游戏中是看不到修改后的存档名称的哦。</p>
<p>world_icon.jpeg是存档图标，长宽分别是400和225.</p>
<h1 id="存档资源包信息"><strong>存档资源包信息</strong></h1>
<p>加入过资源包的存档，在该存档的文件夹会出现world_resource_packs.json和world_resource_pack_history.json以及resource_packs文件夹。加入过行为包的存档，会出现world_behavior_packs.json和world_behavior_pack_history.json以及behavior_packs文件夹。</p>
<p>上面提到出现的文件夹是存储这个资源包或行为包的目录，在这个目录里面会有加载过的资源包或行为包，以文件夹的形式放在这个目录下（不是压缩文件哦）。</p>
<p>world_****_packs.json的文件是以Json格式存储。这个Json文件存储了当前这个存档正在使用的包，里面每个包信息的pack_id和version会与包中menifest.json文件中header属性中的pack_id和version对应。</p>
<p>world_****_pack_history.json文件里面存储了至今这个存档使用了那些包。里面每个包的信息会与包中menifest.json文件中header属性中的pack_id和version对应。can_be_redownloaded参数是用来判断这个包是否是商店内下载的包，当这个属性是true的时候，游戏将会去自身的包下载缓存目录寻找这个包，在Windows 10上这个目录是:  &quot;C:\Users\宁的用户名\AppData\Local\Packages\Microsoft.MinecraftUWP_8wekyb3d8bbwe\LocalState&quot; 但是里面几乎所有的内容都被加密辽，，，。这个目录里面还有一个persona文件夹，应该是存储了在游戏内自定义皮肤的里面的信息。skin_packs文件夹里面存储的是皮肤包。手机root不了所以看不到在哪里，有兴趣的小伙伴可以去手机的根目录找找（大家平时打开手机自身的文件管理器打开的不是根目录**!!!**沃记得的ES文件管理器和MT管理器都可以看到手机根目录的文件)</p>
<p>值得注意的是，开发者可以将自己要测试的包放在com.mojang文件夹下面的development_<strong><strong>_packs文件夹下面。放在这里的包在游戏中导入时，是不会被复制到存档自身的</strong></strong><em>pack文件夹里面的哦。所以，如果是边开发边测试一个包，可以直接在development</em>****_packs文件夹里面创建一个文件夹作为存储这个包的地方，导出这个包时直接将这个文件夹里面的所有文件压缩就可以啦。</p>
<h1 id="nbt格式概述">NBT格式概述</h1>
<p>【本节涉及到小字节序和大字节序，然后up不会讲,,,大家可以去看https://zhuanlan.zhihu.com/p/21388517的&quot;2.2 字节序&quot;一节】</p>
<p>Minecraft在java版和基岩版的数据存储都或多或少的使用了NBT格式。在这里简单的说明一下NBT格式是个什么东西。首先得先说明一下，这种格式是可以嵌入的，不仅仅是在一个文件里面，还可以存在于一个文件的一部分。上面提到过，NBT全名Named Binary  Tag，学过编程的小伙伴可以理解为一个Json数据的结构，没有学过的可以理解成一个数学中的函数——即给出一串文字，有且仅有唯一一个对象与之对应（之类的东西）。在这里我们会来探讨这些数据是如何存储的。（notch提供的nbt.txt说明文档国内好像上不去，能得到这个文件的好心人可以把原文或者网盘地址放在评论区嘛，蟹蟹！~，地址：web.archive.org/web/20110723210920/http://www.minecraft.net/docs/NBT.txt）</p>
<p>既然叫Named Binary Tag，咱们肯定先得看看一个Tag怎么存储。一个Tag的第一个字节代表这个Tag的类型，第二个字节和第三个字节在一起以大字节序组成一个数字，是这个Tag名字的长度。接下来跟着的就是这个Tag的内容，在百度百科叫做辅助信息。</p>
<p><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/d2e81a8aff8ca3015224f1c5fcdb0bdf204292ed.png" alt="img" loading="lazy"><br>
来自百度百科 - NBT （二进制命名标签）</p>
<h1 id="存档其它信息"><strong>存档其它信息</strong></h1>
<p>其它的信息包括地形信息，方块内部特有的信息，实体信息等等（或许概括全了）都<strong>存在&quot;db&quot;文件夹里面</strong>。这个文件夹里面存储的是一个LevelDB数据库（以下简称数据库）。与NBT类似，也是给出一个值，会返回另外一个唯一的值（程序员: 不就是key-value数据库嘛）。</p>
<p>（偷个懒 技术玩家可以通过直接写代码的方式来访问这个数据库 其ta的玩家捏可以通过MCC ToolChest打开这个存档 不过后者可能可见的信息要少一些）</p>
<p>既然给出一个值(key)就返回另外一个唯一的值(value)，那么我们肯定得先从给出的这个值开始入手。咱们从简单的开始。</p>
<p><strong>计分板</strong></p>
<p>计分板肯定得算比较简单的。直接向这个数据库里面传入&quot;scoreboard&quot;中每个字母的ascii码组成的数组就可以（Java: &quot;scoreboard&quot;.getBytes() 后 遗 症)，获取到一个未经压缩的小字节序NBT数据。这个数据中会存储着5个数据:</p>
<p><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/1feac2b904272561f7b536bf597f8978c5f40672.png" alt="img" loading="lazy">五个数据哦~</p>
<p><strong>玩家</strong></p>
<p>游戏中，玩家肯定也是不可少的一部分（废话）。修改玩家的信息也足够简单，不过获取一个玩家的信息是一件难事。目前还未发现比较轻便的查找对应玩家信息的方法。</p>
<p>在数据库中，得到本地玩家的玩家信息要传的参数为&quot;~local_player&quot;；</p>
<p>得到真正的玩家信息要传的参数为&quot;player_<strong><strong><strong><strong>-<strong><strong>-</strong></strong>-<strong><strong>-</strong></strong></strong></strong></strong></strong>&quot;；</p>
<p>当然也会有一种玩家信息是带server的，这种应该是基岩版官方服务器的存档内存储的玩家信息，要传的参数为&quot;player_server_<strong><strong><strong><strong>-<strong><strong>-</strong></strong>-<strong><strong>-</strong></strong></strong></strong></strong></strong>&quot;（下划线和横杠杠不要看错了沃）。（星号组成一个uuid 大概是游戏随机分配的）</p>
<p>（老爹：还有一件事：要传的是这些文字的ASCII码组成的数组!）</p>
<p>三种情况得到的都是一个小字节序的NBT数据。第一种情况和第三种情况得到的NBT数据大致上都应该相同（常用的参数应该都拥有）。第二种情况可能会得到只含三个参数的NBT标签：</p>
<p>​    MsaId和SelfSignedId： 这两个标签似乎都有可能与ta所在标签的名称相同，目前未找到用途；</p>
<p>​    ServerId： 可以直接将这个数据传进数据库，会得到上面提到的第三种情况的数据.</p>
<p>得到的玩家的NBT数据可以直接根据其名称来判断这个属性控制的是游戏中的什么功能（学英文的重要性（ε=┏(゜ロ゜;)┛）） 其它看不懂的，大部分都有可能是一修改就出问题 或是无实际功能或修改价值 抑或是没修炼够/doge：</p>
<figure data-type="image" tabindex="2"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/b3d378d421926dd8ab4bc85223a1fa9dde00e10e.png" alt="img" loading="lazy"></figure>
<p>（当然可能也可以通过修改这个来达到使玩家pregnant的臆想效果（</p>
<p><strong>地图</strong></p>
<p>像素画大师们最钟情（可能）的东西。在数据库中，要想找到一个指定的地图并非容易。得到一个地图数据需要传的参数的格式: &quot;map_&quot;+一串数字。如果单纯看这串十进制的数据，是比较难发现规律的。我们将其变成16进制康康：</p>
<figure data-type="image" tabindex="3"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/a5e271909e7e54bb652b642a1108a8548ca6cdf6.png" alt="img" loading="lazy"></figure>
<p>不难发现（），这串数字的前四位与FF FF FF FF代表的数字相差加上1，即为在创建这个地图的时候进游戏的次数。不过这串数字后四个字节就非常非常神奇，观测是离关游戏的时间越近，这四个字节在大端序下代表的数字就会越小。</p>
<p>并且有时候总会有5个地图的id是连续的。呐是因为呀，当玩家在游戏中创建了一个地图后，游戏内部会新增5个这样连续的id代表5个不同的地图数据。这5个不同的数据代表了该地图的5个级别，就算玩家没有主动去合成其它四个不同级别的地图。</p>
<p>【似乎只能通过玩家手里拿的物品来找到指定的地图了】</p>
<p>我们通过键得到的仍然是一个小字节序的未经压缩的NBT数据。里面可以进行大肆（雾）修改的就是colors数据。这个colors记录了地图128*128图片大小的数据，先从左到右存储图片的第一行像素，依次向图片下方存储。其中每四个字节分别对应r,g,b,a的值，代表一个像素。</p>
<p>地图里面还存储了decorations数据，类型是Compound Tag，这里存储的是地图上面的有些装饰，这个数据里面还存储了2个Compound  Tag叫data和key。key里面存储的是这个装饰的世界位置和类型，data里面存储了这个装饰的方向(rot)，类型(type)和相对于地图的位置（？x, y)。</p>
<p>修改完成地图后，不要忘了把dimension调成-1噢~ 调成-1后，游戏内就对这个地图的修改撒手了。</p>
<p><strong>还有一些其ta的</strong></p>
<p>可以在这里找到: https://minecraft.gamepedia.co/Bedrock_Edition_level_format#Other_keys</p>
<p>（是英文的 Awa）</p>
<h1 id="地形存储">地形存储</h1>
<p><strong>【本节内容可能会有不对的地方 也请大佬们在评论底下修正 非常感谢！】</strong></p>
<p>终于到我们的重头戏了——游戏的地形存储。今天小编就来带大家看看。</p>
<p>首先还是我们的惯例，灵魂疑问：该怎么得到区块的信息呢？真的很简单，人人都可以学得会：首先将这个区块的x坐标以小字节序变成四个字节（即一个int类型）然后将这个区块的z坐标也以小字节序变成四个字节紧随其后，如果这个区块不是主世界区块那就再将其维度对应的id以小字节序还是变成四个字节跟在后面（1是地狱，2是末地），然后后面跟上一个特定的数字以一个字节存储的字节。这个特定的数字可以是下面的任意一个，取决于要申请的数据的类型：</p>
<figure data-type="image" tabindex="4"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/77932686035b7324f5ba68f63e5db2352359bb6f.png" alt="img" loading="lazy"></figure>
<p>例： 如果想要申请x坐标是114514，z坐标是1919180的区块的高度图（臭味图（逃）和生物群系:</p>
<figure data-type="image" tabindex="5"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/d43f4f78deb235cffff4e47725952c59ba7402c8.gif" alt="img" loading="lazy"></figure>
<p><strong>高度图和生物群系</strong></p>
<p>​    申请得到的高度图和生物群系中，前512个字节存储的是高度图。高度图存储了俯视这个区块得到的平面图中，每一格存储一个short类型（一个占两个字节的整数）代表这一格最高的方块处在的y坐标。紧接着是生物群系，以同样的方式，但是是以每一格一个byte类型存储生物群系id。</p>
<p><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/381545dcdfdacb447b46b2b1a65825984c7e65f8.png" alt="img" loading="lazy"><br>
左图:mcc tool chest pe截图 横坐标是x 纵坐标是z   右图:从数据库中取出的数据在十六进制编辑器中的模样</p>
<p><strong>方块实体数据</strong></p>
<p>申请得到的方块实体数据是一个小字节序的NBT数据。</p>
<figure data-type="image" tabindex="6"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/46b06817a8eb2f0db31b1c982eb1306f0d174a4c.png" alt="img" loading="lazy"></figure>
<p>由于未在minecraft维基上面找到每个方块实体存储的信息（抑或是我没找到），于是沃自己整理了一下：</p>
<p>（以下内容按照CC BY-NC-SA 3.0协议分享）</p>
<ol>
<li>
<p>旗帜</p>
<ul>
<li>
<p>Base: (Integer) 旗帜的背景颜色</p>
<figure data-type="image" tabindex="7"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-20200831160640985.png" alt="image-20200831160640985" loading="lazy"></figure>
</li>
<li>
<p>id: (String) 应该都是banner</p>
</li>
<li>
<p>x, y, z: (Integer) 旗帜所占用的方块所在坐标 <strong>【这个参数是每个方块实体数据都有的哦 下面就不写啦】</strong></p>
</li>
<li>
<p>isMovable: (Byte) 还未发现其用处，默认是1</p>
</li>
<li>
<p>Type: (Integer) 还未发现其用处</p>
</li>
</ul>
</li>
<li>
<p>蜂巢，蜂箱 （沃用summon指令创建多只蜜蜂然后游戏就卡死辽？？）</p>
<ul>
<li>
<p>id: (String) 应该都是Beehive</p>
</li>
<li>
<p>isMovable: (Byte) 也是不清楚是干嘛用的（或许每个方块实体存储都有这个参数），默认是1</p>
</li>
<li>
<p>Occupants: (List) 指的是这个beehive里面存储了什么东西。里面存储的都是Json对象。每个Json对象包括:</p>
<ul>
<li>
<p>ActorIdentifier: (String) 当这个值为&quot;minecraft:bee&lt;&gt;&quot;时，代表这是一只可爱的小蜜蜂~ （也没发现可以存什么其它的值呀/xk 不过保持严谨就对(个鬼)）</p>
</li>
<li>
<p>TicksLeftToStay: (Integer) 表示从此刻开始多少个游戏刻之后蜜蜂就会跑粗来</p>
</li>
<li>
<p>SaveData: (Compound) 当&quot;ActorIdentifier&quot;是”minecraft:bee&lt;&gt;“时，这里直接存储了这个蜜蜂的实体NBT，如下图:</p>
<figure data-type="image" tabindex="8"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/QQ%E5%9B%BE%E7%89%8720200831171900.png" alt="So_Long~" loading="lazy"></figure>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>牌子</p>
<ul>
<li>id: (String) 一直都是&quot;Sign&quot;的说~</li>
<li>isMovable: (Byte) 还是不清楚是干嘛用的（果然是常驻居民），默认是1</li>
<li>Text: (String) 牌子上面写的字 换行使用&quot;\n&quot;</li>
<li>TextOwner: (String) 这个值似乎跟编辑这个牌子的玩家有关，但是好像又在玩家的nbt里面找不到与这段文字相同的内容,,,（或许是由于今天是开学前一天沃写的比较急就没有认真找的缘故吧）</li>
</ul>
</li>
<li>
<p>箱子，陷阱箱，漏斗，投掷器，发射器，潜影盒</p>
<ul>
<li>
<p>id: (String) 一直都是&quot;Chest&quot;的</p>
</li>
<li>
<p>isMovable: (Byte) 还是不清楚是干嘛用的（被怀疑凑字数），默认是1</p>
</li>
<li>
<p>Items: (List) 存储了箱子里面的东西。这跟玩家物品栏的存储类似，就是只有当这一格有物品时，游戏才会将其存储到存档里面。当没有存放物品的时候，游戏会将这个存储成一个长度为0的空列表。当向里面存放物品的时候，游戏回家原封不动地将物品的NBT复制到这里面来，并加上一个Byte类型的Slot标签。</p>
</li>
<li>
<p>（仅漏斗） TransferCooldown: (Integer) 猜测是当漏斗传输完一个物品，这个值就会变成漏斗传输物品的冷却tick数，每个tick对这个数递减，当这个数变成0之后就传输下一个物品。还未得到证实（因为太难证实了啊啊啊）</p>
</li>
<li>
<p>（仅箱子，陷阱箱，潜影盒） Findable: (Byte) 似乎没什么用的亚子，默认是0</p>
</li>
<li>
<p>（仅潜影盒） facing: (Byte) 潜影盒的朝向，如下表:</p>
<table>
<thead>
<tr>
<th style="text-align:center">方向</th>
<th style="text-align:center">上</th>
<th style="text-align:center">下</th>
<th style="text-align:center">东</th>
<th style="text-align:center">西</th>
<th style="text-align:center">南</th>
<th style="text-align:center">北</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&quot;facing&quot;值</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">5</td>
<td style="text-align:center">4</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>例： 一个箱子的NBT:</p>
<figure data-type="image" tabindex="9"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008311830.PNG" alt="一个箱子的方块实体NBT" loading="lazy"></figure>
</li>
<li>
<p>篝火，灵魂篝火</p>
<ul>
<li>id: (String) &quot;Campfire&quot;没得洗</li>
<li>isMovable: (Byte) 不清楚是干嘛用的，观测是1</li>
<li>Items1, Items2, Items3, Items4: (Compound) 是篝火的四个槽位。当这上面没有物品时，游戏就不会存储这个Tag。并且与箱子不同的是，这里并不会增加Slot标签。玩家向篝火上面沿着逆时针放物品。</li>
<li>ItemTime1, ItemTime2, ItemTime3, ItemTime4: (Integer) 对应的篝火的四个槽位的已经进行烧烤（）的游戏tick数。</li>
</ul>
<p>例： 一个篝火的方块实体NBT:</p>
<figure data-type="image" tabindex="10"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008311848.PNG" alt="一个篝火的方块实体NBT" loading="lazy"></figure>
</li>
<li>
<p>酿造台</p>
<ul>
<li>
<p>id: (String) &quot;BrewingStand&quot;没得洗</p>
</li>
<li>
<p>isMovable: (Byte) 不清楚是干嘛用的，观测是1</p>
</li>
<li>
<p>CookTime: (Short) 烹饪时间（才怪）是离炼完这次药还有多少的游戏tick。</p>
</li>
<li>
<p>FuelAmount: (Short) 燃料的数量。装入一个烈焰粉，会让这个数变成20。炼一次药，会让这个数减去一。当这个数为0时，就代表燃料耗尽，能不能再炼药了。</p>
</li>
<li>
<p>FuelTotal: (Short) 观测一直是20，大概是开发者忘了删掉这个吧。</p>
</li>
<li>
<p>Items: (List) 跟箱子的Items存储类似，但是在里面炼出来的药水会多出来一个标签：</p>
<figure data-type="image" tabindex="11"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008311930.PNG" alt="我们中，出了一个叛徒" loading="lazy"></figure>
<p>酿造台中每个槽所代表的位置放在下图:</p>
<figure data-type="image" tabindex="12"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008311917.PNG" alt="酿造台的槽位位置" loading="lazy"></figure>
<p>例： 一个正在酿造的酿造台的方块实体NBT:</p>
</li>
</ul>
<figure data-type="image" tabindex="13"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008311924.PNG" alt="一个正在酿造的酿造台的方块实体NBT" loading="lazy"></figure>
</li>
<li>
<p>熔炉，烟熏炉，高炉</p>
<ul>
<li>
<p>id: (String)</p>
<table>
<thead>
<tr>
<th style="text-align:center">熔炉</th>
<th style="text-align:center">烟熏炉</th>
<th style="text-align:center">高炉</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Furnace</td>
<td style="text-align:center">Smoker</td>
<td style="text-align:center">BlastFurnace</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>isMovable: (Byte) 不清楚是干嘛用的，观测是1</p>
</li>
<li>
<p>CookTime: (Short) 当前物品离烧完成还需多少游戏tick</p>
</li>
<li>
<p>BurnTime: (Short) 当前燃料还可以燃烧多少游戏tick</p>
</li>
<li>
<p>StoredXPInt: (Integer) 炉子里面存储的经验数量</p>
</li>
<li>
<p>Items: (List) 跟箱子的作法一样。每个槽位对应的Slot数量如下:</p>
<figure data-type="image" tabindex="14"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008311944.PNG" alt="梅开二度" loading="lazy"></figure>
</li>
</ul>
<p>例： 一个熔炉的方块实体NBT:</p>
</li>
</ol>
<figure data-type="image" tabindex="15"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008311948.PNG" alt="一个熔炉的方块实体NBT" loading="lazy"></figure>
<ol start="7">
<li>
<p>讲台</p>
<ul>
<li>id: (String) &quot;Lectern”跑不掉</li>
<li>isMovable: (Byte) 不清楚是干嘛用的，观测是1</li>
<li>page: (Integer) 目前该讲台展示的书本所在的页数。本标签仅在讲台有书的时候才会被保存。</li>
<li>totalPages: (Integer) 该讲台展示的书本总页数本标签仅在讲台有书的时候才会被保存。</li>
<li>hasBook: (Byte) 这个讲台是否有书在上面，有就是1。本标签仅在讲台有书的时候才会被保存。</li>
<li>book: (Compound) 这里保存了展示的书的物品NBT。</li>
</ul>
<p>例： 一个放置了书的讲台（上）和一个没有放书的讲台（下）:</p>
</li>
</ol>
<figure data-type="image" tabindex="16"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008311959.PNG" alt="一个放置了书的讲台（上）和一个没有放书的讲台（下）" loading="lazy"></figure>
<ol start="8">
<li>
<p>信标</p>
<ul>
<li>id: (String) &quot;Beacon”</li>
<li>isMovable: (Byte) 不清楚是干嘛用的，观测是1</li>
<li>primary: (Integer) 信标的第一级效果应用的药水效果id【跟java版的作用一样~省了我好多实验的时间】</li>
<li>Secondary: (Integer) 信标的第二级效果应用的药水效果id</li>
</ul>
<p>注：如果&quot;primary&quot;和&quot;Secondary&quot;的值相同，那么效果就会变成二级的。</p>
<p>附赠一张基岩版的药水效果对应id表~:</p>
</li>
</ol>
<p>​     <img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008312013.PNG" alt="基岩版的药水效果对应id表" loading="lazy"></p>
<p>​	许许多多的信标，猜猜ta们的对应效果叭~:</p>
<figure data-type="image" tabindex="17"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008312018.PNG" alt="许许多多的信标" loading="lazy"></figure>
<ol start="9">
<li>
<p>刷怪笼</p>
<ul>
<li>id: (String) &quot;MobSpawner”</li>
<li>isMovable: (Byte) 不清楚是干嘛用的，观测是1</li>
<li>EntityIdentifier: (String) 该刷怪笼生成的怪物id, 例: &quot;minecraft:polar_bear&quot;。当该刷怪笼是空时，这个值为空。</li>
<li>MinSpawnDelay, MaxSpawnDelay: (Short) 该刷怪笼的最小和最大的刷怪间隔</li>
<li>RequiredPlayerRange: (Short) 当玩家在刷怪笼几格内时，刷怪笼才会尝试去生成生物（即冒烟（</li>
<li>SpawnRange: (Short) 【自己讲不清楚...找维基, 然后改一改】刷怪笼可以随机生成实体的范围。生成区域为正方体，含刷怪笼所在的方块。生物将会随机生成在以刷怪笼的 X、Z 坐标和以刷怪笼底部的Y坐标为中心的2格高的区域。</li>
<li>MaxNearbyEntities: (Short) 刷怪笼尝试生成生物时，刷怪笼周围的最大实体数量。</li>
<li>SpawnCount: (Short) 刷怪笼每次尝试生成生物的尝试数量（因为在游戏体验中，有时候刷怪笼并不会每次都会生成4个怪物）</li>
<li>Delay: (Short) 下一次生成生物的时间离现在有多少游戏tick。当玩家距离刷怪笼的长度满足刷怪笼的生成条件且刷怪笼内部有刷怪蛋时，这个值才会刷新。刷新这个值，即取在最小刷怪间隔和最大刷怪间隔之间取一个随机数。</li>
<li>DisplayEntityHeight, DisplayEntityScale, DisplayEntityWidth: (Float) 需要证实： 游戏每次尝试生成生物时，会以DisplayEntityWidth为长和宽，DisplayEntityHeight为高的矩形去测试某个地方是否会生成生物。</li>
</ul>
<p>例: 一个被修改过的空的刷怪箱:</p>
<figure data-type="image" tabindex="18"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008312103.PNG" alt="整篇文章怎么洋溢着一股臭味呢" loading="lazy"></figure>
</li>
<li>
<p>音符盒</p>
<ul>
<li>id: (String) &quot;Music” 第一个与对应的方块的英文名字不一样的id!</li>
<li>isMovable: (Byte) 第10次不清楚是干嘛用的，观测是1</li>
<li>note: (Byte) 该音符的音高。通俗来讲就是玩家敲击了几次音符盒。如图:</li>
</ul>
<figure data-type="image" tabindex="19"><img src="https://static.wikia.nocookie.net/minecraft_zh_gamepedia/images/b/bd/Noteblock_reference.png/revision/latest/scale-to-width-down/720?cb=20190129093637" alt="Noteblock reference.png" loading="lazy"></figure>
<p>例：一个被敲击了一次的音符盒的方块实体NBT标签:</p>
</li>
</ol>
<figure data-type="image" tabindex="20"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008312055.PNG" alt="一个被敲击了一次的音符盒的方块实体NBT标签" loading="lazy"></figure>
<ol start="11">
<li>
<p>唱片机</p>
<ul>
<li>
<p>id: (String) &quot;Jukebox”</p>
</li>
<li>
<p>isMovable: (Byte) 不清楚是干嘛用的，观测是1</p>
</li>
<li>
<p>RecordItem: (Compound) 是该唱片内部存储的唱片物品的NBT。当这个唱片机里面没有唱片时，则没有这一项。</p>
</li>
</ul>
<p>例：上方是内部存有游戏里没有的唱片的唱片机，下方是没有唱片的:</p>
<figure data-type="image" tabindex="21"><img src="https://lovelyzeeiam.github.io/post-images/bedrock-save/image-202008312101.PNG" alt="上方是内部存有游戏里没有的唱片的唱片机，下方是没有唱片的" loading="lazy"></figure>
</li>
</ol>
<blockquote>
<p><code>【雪莉：现在时间是8月31号晚上9点18分，似乎...算了，抓紧吧，以后来作业了又...】</code></p>
</blockquote>
<ol start="12">
<li>
<p>伸出的活塞臂</p>
<ul>
<li>id: (String) &quot;PistonArm”</li>
<li>Sticky: (Byte) 活塞臂是否是黏糊糊的（粘性活塞）</li>
</ul>
<p>研究这个比较困难，因为活塞伸出的时间就只有那么长，想要踩点对我来说还是很困难的。于是下面就直接展示自己的研究过程吧。</p>
<p>​	首先我摆放了四个活塞，一个不伸出，一个伸出来，还有一个伸到一半，最后一个缩回来一半(怎么说起来那么奇怪呢)。并对比两者中有何变化。以下是有变化的项(在我的测试时):</p>
<p>​	【呜呜呜┭┮﹏┭┮获得这些数据花了我好久因为我是手残QwQ 所以那个按钮之类的...Awq】</p>
<p>​	【部分数据是猜测 不过大概率肯定是对的 【啊...手残党...】】</p>
<p>​	【我的测试是将粘性活塞放在[ 4, 8, 11 ]的地方，将[ 4, 8, 10 ]的方块来回推，下表从左到右展示了这个过程】</p>
</li>
</ol>
<table>
            <tr>
                <td><b>项的名称</b></td>
                <td><b>活塞臂未伸出时的值</b></td>
                <td colspan="2"><b>活塞臂正在伸出时的值</b></td>
                <td><b>活塞臂伸出时的值</b></td>
                <td colspan="2"><b>活塞臂正在缩回时的值</b></td>
            </tr>
            <tr>
                <td>isMovable</td>
                <td>1</td>
                <td>1</td>
                <td>1</td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
            </tr>
            <tr>
                <td>LastProgress</td>
                <td>0</td>
                <td>0</td>
                <td>0.5</td>
                <td>1</td>
                <td>1</td>
                <td>0.5</td>
            </tr>
            <tr>
                <td>Progress</td>
                <td>0</td>
                <td>0.5</td>
                <td>1</td>
                <td>1</td>
                <td>0.5</td>
                <td>0</td>
            </tr>
            <tr>
                <td>State</td>
                <td>0</td>
                <td>1</td>
                <td>1</td>
                <td>2</td>
                <td>3</td>
                <td>3</td>
            </tr>
            <tr>
                <td>NewState</td>
                <td>0</td>
                <td>1</td>
                <td>1</td>
                <td>2</td>
                <td>3</td>
                <td>3</td>
            </tr>
            <tr>
                <td>AttachedBlocks</td>
                <td>[]</td>
                <td>[ 4, 8, 10 ]</td>
                <td>[ 4, 8, 10 ]</td>
                <td>[]</td>
                <td>[ 4, 8, 9 ]</td>
                <td>[ 4, 8, 9 ]</td>
            </tr>
</table>
<blockquote>
<p><code>【22点21了...】</code></p>
</blockquote>
<p>​			其实还有一个项，&quot;BreakBlocks&quot;。猜测是由于我的测试一直都是推方块，所以这个值一直都没用到【要那样测试的话...我已经在233层高楼上面准备把空气当床了】。估计这个BreakBlocks如果使用到了的话，相同的情况对应的跟上面的movingBlocks的值是相同的。</p>
<p>​			研究发现，当粘性的活塞臂正在伸出时，其AttachedBlocks会的值为其活塞臂粘着的方块还未被推动时的原坐标；当粘性的活塞臂正在缩回时，其AttachedBlocks会的值为其活塞臂粘着的方块还未被拉回时的原坐标。</p>
<p>​			由于测试太过繁琐，所以我们来直接推测一下如果不是粘性活塞而是普通的活塞，那么这些值会怎么变化。推测：其它值都随着上面的走，但AttachedBlocks只在活塞推动了一个方块时才会有值。</p>
<p>​			【幸亏测试的是粘性活塞呀，不然...233层高楼我来了】</p>
<p>​			排除了这些项之后，,,,，好像就没有其ta项了嘻嘻(●'◡'●) 直接进入下一个。</p>
<ol start="13">
<li>
<p>正在被活塞移动的方块：当上面活塞臂的state是1或3时才会出现这个类型的实体方块。</p>
<ul>
<li>id: (String) &quot;MovingBlock”</li>
<li>isMovable: (Byte) 不清楚是干嘛用的，观测是1</li>
<li>movingBlock: (Compound) 记录了这个movingBlock的方块NBT</li>
<li>movingBlockExtra: (Compound) 记录了一个方块NBT，在自己的实验中好像一直是air的方块nbt。TODO: 尝试用活塞去拉史莱姆方块粘着的方块看看这个值。</li>
</ul>
</li>
</ol>
<p>​			既然跟活塞运动有关【不要想歪真的没有那种意思】，我们就使用跟研究活塞一样的列表思路。下表记录的仍然是有变化的量。<br>
​			【部分数据是猜测 不过大概率肯定是对的 【啊...手残党... *2】】<br>
​			【我的测试是将粘性活塞放在[ 4, 8, 11 ]的地方，将[ 4, 8, 10 ]的红石块来回推，下表从左到右展示了这个过程】<br>
​			【什么？宁认为我又会去做一遍实验? Oh no~ 我在做实验时发现了这个MovingBlock，在做上面的实验的时候顺便也记下来惹~~~~】</p>
<blockquote>
<p><code>【第二天晚上】</code></p>
</blockquote>
<table>
	<tr>
        <td><b>项的名称</b></td>
		<td><b>活塞臂未伸出时的值</b></td>
		<td colspan="2"><b>活塞臂正在伸出时的值</b></td>
		<td><b>活塞臂伸出时的值</b></td>
		<td colspan="2"><b>活塞臂正在缩回时的值</b></td>
	</tr>
    <tr>
                <td>State (这个是复制的上面一个表 方便记录)</td>
                <td>0</td>
                <td>1</td>
                <td>1</td>
                <td>2</td>
                <td>3</td>
                <td>3</td>
            </tr>
    <tr>
		<td>pistonPosX, pistonPosY, pistonPosZ </td>
        <td>[]</td>
        <td>[ 4, 8, 11 ]</td>
        <td>[ 4, 8, 11 ]</td>
        <td>[]</td>
        <td>[ 4, 8, 11 ]</td>
        <td>[ 4, 8, 11 ]</td>
	</tr>
	<tr>
		<td>x, y, z</td>
        <td>[]</td>
        <td>[ 4, 8, 9 ]</td>
        <td>[ 4, 8, 9 ]</td>
        <td>[]</td>
        <td>[ 4, 8, 10 ]</td>
        <td>[ 4, 8, 10 ]</td>
	</tr>
</table>
​			于是可以得出普遍规律: 当出现这个实体方块NBT时，pistonPosX, pistonPosY, pistonPosZ指向的坐标总是推这个方块的活塞；当活塞正在推ta时，x, y, z指向的坐标是这个实体方块将被推到的坐标，反之，当活塞正在拉ta时，x，y，z指向的是这个实体方块将被拉回到的坐标。
<p>​			为了猜测movingBlockExtra的用途，我打算继续做一个实验:</p>
<p>![又一个实验](..\post-images\bedrock-save\Minecraft 2020_9_1 23_30_04.png)</p>
<p>​			当我用史莱姆方块拉着一个方块让活塞臂进行伸缩运动时，红石块出现的MovingBlock方块实体NBT内，pistonPosX, pistonPosY, pistonPosZ仍然是推拉史莱姆方块的活塞的坐标。movingBlockExtra仍然是空气的方块NBT。</p>
]]></content>
    </entry>
</feed>